<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="ifpress-solr" version="1.5">
  <!-- attribute "name" is the name of this schema and is only used for display 
    purposes. version="x.y" is Solr's version number for the schema syntax and 
    semantics. It should not normally be changed by applications. 1.0: multiValued 
    attribute did not exist, all fields are multiValued by nature 1.1: multiValued 
    attribute introduced, false by default 1.2: omitTermFreqAndPositions attribute 
    introduced, true by default except for text fields. 1.3: removed optional 
    field compress feature 1.4: autoGeneratePhraseQueries attribute introduced 
    to drive QueryParser behavior when a single string produces multiple tokens. 
    Defaults to off for version >= 1.4 1.5: omitNorms defaults to true for primitive 
    field types (int, float, boolean, string...) -->

  <types>
    <!-- field type definitions. The "name" attribute is just a label to be 
      used by field definitions. The "class" attribute and any other attributes 
      determine the real behavior of the fieldType. Class names starting with "solr" 
      refer to java classes in the org.apache.solr.analysis package. -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField"
      sortMissingLast="true" omitNorms="true" omitTermFreqAndPositions="true" />

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField"
      sortMissingLast="true" omitNorms="true" />

    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded 
      Strings -->
    <fieldtype name="binary" class="solr.BinaryField" />

    <!-- The optional sortMissingLast and sortMissingFirst attributes are currently 
      supported on types that are sorted internally as strings. This includes "string","boolean","sint","slong","sfloat","sdouble","pdate" 
      - If sortMissingLast="true", then a sort on this field will cause documents 
      without the field to come after documents with the field, regardless of the 
      requested sort order (asc or desc). - If sortMissingFirst="true", then a 
      sort on this field will cause documents without the field to come before 
      documents with the field, regardless of the requested sort order. - If sortMissingLast="false" 
      and sortMissingFirst="false" (the default), then default lucene sorting will 
      be used which places docs without the field first in an ascending sort and 
      last in a descending sort. -->

    <!-- Default numeric field types. For faster range queries, consider the 
      tint/tfloat/tlong/tdouble types. -->
    <fieldType name="int" class="solr.TrieIntField"
      precisionStep="0" omitNorms="true" positionIncrementGap="0" />
    <fieldType name="float" class="solr.TrieFloatField"
      precisionStep="0" omitNorms="true" positionIncrementGap="0" />
    <fieldType name="long" class="solr.TrieLongField"
      precisionStep="0" omitNorms="true" positionIncrementGap="0" />
    <fieldType name="double" class="solr.TrieDoubleField"
      precisionStep="0" omitNorms="true" positionIncrementGap="0" />

    <!-- Numeric field types that index each value at various levels of precision 
      to accelerate range queries when the number of values between the range endpoints 
      is large. See the javadoc for NumericRangeQuery for internal implementation 
      details. Smaller precisionStep values (specified in bits) will lead to more 
      tokens indexed per value, slightly larger index size, and faster range queries. 
      A precisionStep of 0 disables indexing at different precision levels. -->
    <fieldType name="tint" class="solr.TrieIntField"
      precisionStep="8" omitNorms="true" positionIncrementGap="0" />
    <fieldType name="tfloat" class="solr.TrieFloatField"
      precisionStep="8" omitNorms="true" positionIncrementGap="0" />
    <fieldType name="tlong" class="solr.TrieLongField"
      precisionStep="8" omitNorms="true" positionIncrementGap="0" />
    <fieldType name="tdouble" class="solr.TrieDoubleField"
      precisionStep="8" omitNorms="true" positionIncrementGap="0" />

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, 
      and is a more restricted form of the canonical representation of dateTime 
      http://www.w3.org/TR/xmlschema-2/#dateTime The trailing "Z" designates UTC 
      time and is mandatory. Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z 
      All other components are mandatory. Expressions can also be used to denote 
      calculations that should be performed relative to "NOW" to determine the 
      value, ie... NOW/HOUR ... Round to the start of the current hour NOW-1DAY 
      ... Exactly 1 day prior to now NOW/DAY+6MONTHS+3DAYS ... 6 months and 3 days 
      in the future from the start of the current day Consult the DateField javadocs 
      for more information. Note: For faster range queries, consider the tdate 
      type -->
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true"
      precisionStep="0" positionIncrementGap="0" />

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField"
      omitNorms="true" precisionStep="6" positionIncrementGap="0" />

    <!-- The "RandomSortField" is not used to store or search any data. You 
      can declare fields of this type it in your schema to generate pseudo-random 
      orderings of your docs for sorting purposes. The ordering is generated based 
      on the field name and the version of the index, As long as the index version 
      remains unchanged, and the same field name is reused, the ordering of the 
      docs will be consistent. If you want different psuedo-random orderings of 
      documents, for the same version of the index, use a dynamicField and change 
      the name -->
    <fieldType name="random" class="solr.RandomSortField"
      indexed="true" />

    <!-- solr.TextField allows the specification of custom text analyzers specified 
      as a tokenizer and a list of token filters. Different analyzers may be specified 
      for indexing and querying. The optional positionIncrementGap puts space between 
      multiple fields of this type on the same document, with the purpose of preventing 
      false phrase matching across fields. For more info on customizing your analyzer 
      chain, please see http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters -->

    <!-- One can also specify an existing Analyzer class that has a default 
      constructor via the class attribute on the analyzer element <fieldType name="text_greek" 
      class="solr.TextField"> <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/> 
      </fieldType> -->

    <!-- A text field that only splits on whitespace for exact matching of 
      words -->
    <fieldType name="text_ws" class="solr.TextField"
      positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="xml_text_type" class="solr.TextField" storeOffsetsWithPositions="true">
      <analyzer type="index">
        <charFilter class="solr.HTMLStripCharFilterFactory" />
        <tokenizer class="solr.StandardTokenizerFactory" />
        <filter class="solr.ASCIIFoldingFilterFactory" />
        <filter class="solr.KStemFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory" />
        <filter class="solr.ASCIIFoldingFilterFactory" />
        <filter class="solr.KStemFilterFactory" />
      </analyzer>
    </fieldType>

    <!-- case-and-diacritic-sensitive full text analysis -->
    <fieldType name="xml_text_case_type" class="solr.TextField"
      storeOffsetsWithPositions="true">
      <analyzer type="index">
        <charFilter class="solr.HTMLStripCharFilterFactory" />
        <tokenizer class="solr.StandardTokenizerFactory" />
        <filter class="solr.KStemFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory" />
        <filter class="solr.KStemFilterFactory" />
      </analyzer>
    </fieldType>

    <!-- A text field that uses WordDelimiterFilter to enable splitting and 
      matching of words on case-change, alpha numeric boundaries, and non-alphanumeric 
      chars, so that a query of "wifi" or "wi fi" could match a document containing 
      "Wi-Fi". -->
    <!-- changed positionIncrementGap to 0 so that multiple text nodes in an 
      xml document indexed by fulltext_t will be treated as contiguous text for 
      the purpose of phrase queries and highlighting. -->
    <fieldType name="text" class="solr.TextField"
      positionIncrementGap="0" storeOffsetsWithPositions="true">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory" />
        <filter class="solr.EnglishPossessiveFilterFactory" />
        <filter class="solr.ASCIIFoldingFilterFactory" />
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="text_case_sensitive" class="solr.TextField"
      positionIncrementGap="100" storeOffsetsWithPositions="true">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.EnglishPossessiveFilterFactory" />
        <filter class="solr.KStemFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.EnglishPossessiveFilterFactory" />
        <filter class="solr.KStemFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="text_unstemmed" class="solr.TextField"
      positionIncrementGap="0">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.EnglishPossessiveFilterFactory" />
        <!-- <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" 
          generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" 
          splitOnCaseChange="1"/> -->
        <filter class="solr.ASCIIFoldingFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory" />
        <filter class="solr.ASCIIFoldingFilterFactory" />
      </analyzer>
    </fieldType>

    <!-- case-folds, diacritic-folds, trims whitespace, and keeps the entire 
      field value as a single token. For use as a sortkey. -->
    <fieldType name="sortkey" stored="false" indexed="true"
      class="solr.TextField" positionIncrementGap="100" omitNorms="true"
      omitTermFreqAndPositions="true">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory" />
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <filter class="solr.ASCIIFoldingFilterFactory" />
      </analyzer>
    </fieldType>

        <fieldType name="keyword" class="solr.TextField" stored="false" indexed="true">
            <analyzer>
                <tokenizer class="solr.KeywordTokenizerFactory" />
            </analyzer>
        </fieldType>
    
        <!-- since fields of this type are by default not stored or indexed, any 
      data added to them will be ignored outright. -->
    <fieldtype name="ignored" stored="false" indexed="false"
      multiValued="true" class="solr.StrField" />

    <fieldtype name="payloads" stored="false" indexed="true"
      class="solr.TextField">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
        <!-- The DelimitedPayloadTokenFilter can put payloads on tokens... for 
          example, a token of "foo|1.4" would be indexed as "foo" with a payload of 
          1.4f Attributes of the DelimitedPayloadTokenFilterFactory : "delimiter" - 
          a one character delimiter. Default is | (pipe) "encoder" - how to encode 
          the following value into a playload float -> org.apache.lucene.analysis.payloads.FloatEncoder, 
          integer -> o.a.l.a.p.IntegerEncoder identity -> o.a.l.a.p.IdentityEncoder 
          Fully Qualified class name implementing PayloadEncoder, Encoder must have 
          a no arg constructor. -->
        <filter class="solr.DelimitedPayloadTokenFilterFactory"
          encoder="float" />
      </analyzer>
    </fieldtype>

  </types>


  <fields>
    <!-- Valid attributes for fields: name: mandatory - the name for the field 
      type: mandatory - the name of a previously defined type from the <types> 
      section indexed: true if this field should be indexed (searchable or sortable) 
      stored: true if this field should be retrievable compressed: [false] if this 
      field should be stored using gzip compression (this will only apply if the 
      field type is compressable; among the standard field types, only TextField 
      and StrField are) multiValued: true if this field may contain multiple values 
      per document omitNorms: (expert) set to true to omit the norms associated 
      with this field (this disables length normalization and index-time boosting 
      for the field, and saves some memory). Only full-text fields or fields that 
      need an index-time boost need norms. termVectors: [false] set to true to 
      store the term vector for a given field. When using MoreLikeThis, fields 
      used for similarity should be stored for best performance. termPositions: 
      Store position information with the term vector. This will increase storage 
      costs. termOffsets: Store offset information with the term vector. This will 
      increase storage costs. default: a value that should be used if no value 
      is specified when adding a document. -->

    <!-- this field uniquely identifies this document in the index. it is usually 
      a combination of type & id. -->
    <!-- <field name="uniqueid" type="string" indexed="true" stored="true" 
      required="true" /> <field name="id" type="string" indexed="true" stored="true" 
      required="true" /> <field name="type" type="string" indexed="true" stored="true" 
      required="true" /> -->
    <field name="uri" type="string" indexed="true" stored="true" required="true" />
    <field name="catchall" type="keyword" indexed="true" stored="false" multiValued="true" />
    <field name="size_i" type="int" indexed="false" stored="true" />
    <field name="directory_b" type="boolean" indexed="true" stored="true" />
    <field name="binary" type="binary" indexed="false" stored="true" />
    <field name="title_t" type="text" indexed="true" stored="true" />

    <!-- text content that is searched by default; we store it so solr can 
      do highlighting -->
    <field name="fulltext_t" type="text" indexed="true" stored="true" multiValued="true" />

    <!-- unstemmed text content -->
    <field name="fulltext_t_unstemmed" type="text_unstemmed" indexed="true" stored="false" multiValued="true" />

    <!-- also index full-text as case-sensitive -->
    <field name="fulltext_t_case" type="text_case_sensitive" indexed="true" stored="false" multiValued="true" />

    <!-- support for case-sensitive and unstemmed searches -->
    <copyField source="fulltext_t" dest="fulltext_t_case" />
    <copyField source="fulltext_t" dest="fulltext_t_unstemmed" />
    
    <!--  used in block query test -->
    <field name="text_t" type="text" indexed="true" stored="true" omitNorms="true" />
    
    <field name="keyword" type="keyword" indexed="true" stored="false" multiValued="true" />

    <!-- whether the content is active / enabled for display -->
    <field name="active" type="boolean" indexed="true" stored="false" multiValued="false" />

    <field name="payloads" type="payloads" indexed="true" stored="true" />

    <field name="_version_" type="long" indexed="true" stored="true" />

    <!-- points to the root document of a block of nested documents. Required for nested document support, may be removed otherwise -->
    <field name="_root_" type="string" indexed="true" stored="false"/>

    <!-- Uncommenting the following will create a "timestamp" field using a 
      default value of "NOW" to indicate when each document was indexed. -->
    <field name="timestamp" type="date" indexed="true" stored="true"
      default="NOW" multiValued="false" />

    <!-- TODO: consider lazy loading -->
    <field name="xml_text" type="xml_text_type" indexed="true"
      stored="true" multiValued="false" />

    <field name="xml_text_case" type="xml_text_case_type" indexed="true"
      stored="false" multiValued="false" />
    <copyField source="xml_text" dest="xml_text_case" />

    <field name="dc_source_uri_s" type="string" indexed="true" stored="true" multiValued="false" omitNorms="false" />

    <!-- Dynamic field definitions. If a field name is not found, dynamicFields 
      will be used if the name matches any of the patterns. RESTRICTION: the glob-like 
      pattern in the name attribute must have a "*" only at the start or the end. 
      EXAMPLE: name="*_i" will match any field ending in _i (like myid_i, z_i) 
      Longer patterns will be matched first. if equal size patterns both match, 
      the first appearing in the schema will be used. -->
    <dynamicField name="*_i" type="int" indexed="true"
      stored="false" />
    <dynamicField name="*_s" type="string" indexed="true" stored="true" />
    <dynamicField name="*_l" type="long" indexed="true"
      stored="false" />
    <dynamicField name="*_t" type="text" indexed="true" stored="true" />
    <dynamicField name="*_tu" type="text_unstemmed" indexed="true"
      stored="false" />
    <dynamicField name="*_b" type="boolean" indexed="true"
      stored="false" />
    <dynamicField name="*_f" type="float" indexed="true"
      stored="false" />
    <dynamicField name="*_d" type="double" indexed="true"
      stored="false" />
    <dynamicField name="*_dt" type="date" indexed="true"
      stored="false" />

    <!-- some trie-coded dynamic fields for faster range queries -->
    <dynamicField name="*_ti" type="tint" indexed="true"
      stored="false" />
    <dynamicField name="*_tl" type="tlong" indexed="true"
      stored="false" />
    <dynamicField name="*_tf" type="tfloat" indexed="true"
      stored="false" />
    <dynamicField name="*_td" type="tdouble" indexed="true"
      stored="false" />
    <dynamicField name="*_tdt" type="tdate" indexed="true"
      stored="false" />

    <!-- multivalued string -->
    <dynamicField name="*_ms" type="string" indexed="true"
      stored="false" multiValued="true" />

    <!-- stored string; not indexed -->
    <dynamicField name="*_ss" type="string" indexed="false"
      stored="true" />

    <!-- lowercase keyword; for sorting -->
    <dynamicField name="*_ls" type="sortkey" />

    <!-- multivalued text -->
    <dynamicField name="*_mt" type="text" indexed="true"
      stored="false" multiValued="true" />
    <dynamicField name="*_mtu" type="text_unstemmed" indexed="true"
      stored="false" multiValued="true" />
    <dynamicField name="*_mt_case" type="text_case_sensitive"
      indexed="true" stored="false" multiValued="true" />
    <dynamicField name="*_mt_stored" type="text" indexed="true"
      stored="true" multiValued="true" />

    <dynamicField name="ignored_*" type="ignored"
      multiValued="true" />

    <dynamicField name="random_*" type="random" />

    <!-- uncomment the following to ignore any fields that don't already match 
      an existing field name or dynamic field, rather than reporting them as an 
      error. alternately, change the type="ignored" to some other type e.g. "text" 
      if you want unknown fields indexed and/or stored by default -->
    <!--dynamicField name="*" type="ignored" multiValued="true" / -->
    
    <field name="weight_dv" type="int" indexed="false" stored="false" docValues="true" />

  </fields>

  <!-- Field to use to determine and enforce document uniqueness. Unless this 
    field is marked with required="false", it will be a required field -->
  <uniqueKey>uri</uniqueKey>

  <!-- Lazy field loading will attempt to read only parts of documents on 
    disk that are requested. Enabling should be faster if you aren't retrieving 
    all stored fields. -->
  <enableLazyFieldLoading>true</enableLazyFieldLoading>

  <!-- Above, multiple source fields are copied to the [text] field. Another 
    way to map multiple source fields to the same destination field is to use 
    the dynamic field syntax. copyField also supports a maxChars to copy setting. -->

  <!-- <copyField source="*_t" dest="text" maxChars="3000"/> -->
</schema>
